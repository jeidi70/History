import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import MenuButtonWebApp, WebAppInfo
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7329811205:AAGAg5Un_4enwIsEPXPrTTXwojJ29XZgnA4", parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def set_menu():
    await bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="üìñ –û—Ç–∫—Ä—ã—Ç—å —É—á–µ–±–Ω–∏–∫",
            web_app=WebAppInfo(url="https://–≤–∞—à-—Å–∞–π—Ç.vercel.app")  # –ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
        )
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await set_menu()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—á–µ–±–Ω–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏!")

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)